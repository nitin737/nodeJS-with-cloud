name: Hello-World NodeJS App

on:
  push:
    branches: [main]

env:
  ENVIRONMENT: stage
  AWS_ACCOUNT_ID: ${{vars.AWS_ACCOUNT_ID}}
  AWS_REGION: eu-central-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::$AWS_ACCOUNT_ID:role/github-actions-oidc-role # github-actions-oidc-role
          aws-region: eu-central-1
          audience: sts.amazonaws.com
          role-session-name: GitHubActions

      # Use the aws-actions/amazon-ecr-login@v1 action to authenticate Docker with your ECR registry
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Builds a Docker image and pushes it to ECR.
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.eu-central-1.amazonaws.com/nitin737:latest

      - name: Fill in the new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/config/task-definition.json
          container-name: web
          image: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/nitin737:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: node-js-service
          cluster: nodeJS-cloud-space
          wait-for-service-stability: true
